/* SPDX-License-Identifier: GPL-2.0-or-later */

/***************************************************************************
 *   Copyright (C) 2024 Dumpit                                             *
 *                                                                         *
 ***************************************************************************/

/*
 * MSM NAND Controller
 */
#include "bitutils.h"

#ifndef OPENOCD_FLASH_NAND_MSM_H
#define OPENOCD_FLASH_NAND_MSM_H

#define MSM_NAND_TIMEOUT 5000

/* MSM6250 */

#define MSM6250_REG_FLASH_BUFFER 0x0
#define MSM6250_REG_FLASH_CMD 0x300
#define MSM6250_REG_FLASH_ADDR 0x304
#define MSM6250_REG_FLASH_STATUS 0x308
#define MSM6250_REG_FLASH_CFG1 0x31C
#define MSM6250_REG_FLASH_SPARE_DATA 0x320

#define MSM6250_CMD_FLASH_RESET 0
#define MSM6250_CMD_FLASH_PAGE_READ 1
#define MSM6250_CMD_FLASH_FLAG_READ 2
#define MSM6250_CMD_FLASH_PAGE_WRITE 3
#define MSM6250_CMD_FLASH_BLOCK_ERASE 4
#define MSM6250_CMD_FLASH_ID_FETCH 5
#define MSM6250_CMD_FLASH_STATUS_CHECK 6
#define MSM6250_CMD_FLASH_RESET_NAND 7

struct bitmask MSM6250_6800_ADDR_SPARE_AREA_BYTE_ADDRESS = {0, 0x3f};
struct bitmask MSM6250_6800_ADDR_FLASH_PAGE_ADDRESS = {9, 0x7fffff};

struct bitmask MSM6250_6800_CMD_OP_CMD = {0, 0x7};
struct bitmask MSM6250_6800_CMD_SW_CMD_EN = {3, 0x1};
struct bitmask MSM6250_6800_CMD_SW_CMD_VAL = {4, 0xff};
struct bitmask MSM6250_6800_CMD_SW_CMD_ADDR_SEL = {12, 0x1};
struct bitmask MSM6250_6800_CMD_SW_CMD1_REPLACE = {13, 0x1};
struct bitmask MSM6250_6800_CMD_SW_CMD2_REPLACE = {14, 0x1};

struct bitmask MSM6250_STATUS_OP_STATUS = {0, 0x7};
struct bitmask MSM6250_STATUS_OP_ERR = {3, 0x1};
struct bitmask MSM6250_STATUS_CORRECTABLE_ERROR = {4, 0x1};
struct bitmask MSM6250_STATUS_READY_BUSY_N = {5, 0x1};
struct bitmask MSM6250_STATUS_ECC_SELF_ERR = {6, 0x1};
struct bitmask MSM6250_STATUS_WRITE_OP_RESULT = {7, 0x1};
struct bitmask MSM6250_STATUS_OP_FAILURE = {0, 0x88};
struct bitmask MSM6250_STATUS_READY_BUSY_N_STATUS = {13, 0x1};
struct bitmask MSM6250_STATUS_WRITE_PROTECT = {14, 0x1};
struct bitmask MSM6250_STATUS_NAND_DEVID = {15, 0xff};
struct bitmask MSM6250_STATUS_NAND_MFRID = {23, 0xff};
struct bitmask MSM6250_STATUS_READ_ERROR = {31, 0x1};

struct bitmask MSM6250_CONFIG_ECC_DISABLED = {0, 0x1};
struct bitmask MSM6250_CONFIG_BUSFREE_SUPPORT_SELECT = {1, 0x1};
struct bitmask MSM6250_CONFIG_ECC_HALT_DIS = {2, 0x1};
struct bitmask MSM6250_CONFIG_CLK_HALT_DIS = {3, 0x1};
struct bitmask MSM6250_CONFIG_WIDE_NAND = {5, 0x1};
struct bitmask MSM6250_CONFIG_BUFFER_MEM_WRITE_WAIT = {6, 0x1};
struct bitmask MSM6250_CONFIG_ECC_ERR_SELF_DETECT = {7, 0x1};
struct bitmask MSM6250_CONFIG_NAND_RECOVERY_CYCLE = {8, 0x7};

struct bitmask MSM6550_CONFIG2_ID_RD_SETUP = {0, 0x1f};
struct bitmask MSM6550_CONFIG2_RD_SETUP = {5, 0x1f};
struct bitmask MSM6550_CONFIG2_RD_ACTIVE = {10, 0x1f};
struct bitmask MSM6550_CONFIG2_WR_HOLD = {15, 0x1f};
struct bitmask MSM6550_CONFIG2_WR_ACTIVE = {20, 0x1f};
struct bitmask MSM6550_CONFIG2_WR_SETUP = {25, 0x1f};

/* MSM6800 */
#define MSM6800_REG_FLASH_BUFFER 0x0
#define MSM6800_REG_FLASH_ADDR 0x300
#define MSM6800_REG_FLASH_CMD 0x304
#define MSM6800_REG_FLASH_STATUS 0x308
#define MSM6800_REG_FLASH_COMMON_CFG 0x31C
#define MSM6800_REG_FLASH_ID_DATA 0x320
#define MSM6800_REG_FLASH_SPARE_DATA 0x324
#define MSM6800_REG_FLASH_CFG1_FLASH1 0x328
#define MSM6800_REG_FLASH_CFG1_FLASH2 0x32c
#define MSM6800_REG_FLASH_CFG2_FLASH1 0x330
#define MSM6800_REG_FLASH_CFG2_FLASH2 0x334

struct bitmask MSM6800_STATUS_OP_STATUS = {0, 0x7};
struct bitmask MSM6800_STATUS_OP_ERR = {3, 0x1};
struct bitmask MSM6800_STATUS_CORRECTABLE_ERROR = {4, 0x1};
struct bitmask MSM6800_STATUS_READY_BUSY_N = {5, 0x1};
struct bitmask MSM6800_STATUS_ECC_SELF_ERR = {6, 0x1};
struct bitmask MSM6800_STATUS_WRITE_OP_RESULT = {7, 0x1};
struct bitmask MSM6800_STATUS_OP_FAILURE = {0, 0x88};
struct bitmask MSM6800_STATUS_READY_BUSY_N_STATUS = {13, 0x1};
struct bitmask MSM6800_STATUS_WRITE_PROTECT = {14, 0x1};
struct bitmask MSM6800_STATUS_NAND_AUTOPROBE_DONE = {15, 0x1};
struct bitmask MSM6800_STATUS_NAND_AUTOPROBE_ISLARGE = {16, 0x1};
struct bitmask MSM6800_STATUS_NAND_AUTOPROBE_IS16BIT = {17, 0x1};
struct bitmask MSM6800_STATUS_READ_ERROR = {31, 0x1};

struct bitmask MSM6800_COMMONCFG_BUFFER_MEM_WRITE_WAIT = {0, 0x1};
struct bitmask MSM6800_COMMONCFG_ECC_ERR_SELF_DETECT = {1, 0x1};
struct bitmask MSM6800_COMMONCFG_ECC_HALT_DIS = {2, 0x1};
struct bitmask MSM6800_COMMONCFG_CLK_HALT_DIS = {3, 0x1};
struct bitmask MSM6800_COMMONCFG_NAND_SEL = {4, 0x1};
struct bitmask MSM6800_COMMONCFG_DM_EN = {5, 0x1};
struct bitmask MSM6800_COMMONCFG_NAND_AUTOPROBE = {6, 0x1};

struct bitmask MSM6800_FLASH_NAND_DEVID = {0, 0xff};
struct bitmask MSM6800_FLASH_NAND_MFRID = {8, 0xff};
struct bitmask MSM6800_FLASH_NAND_EXTID = {16, 0xff};

struct bitmask MSM6800_CONFIG1_ECC_DISABLED = {0, 0x1};
struct bitmask MSM6800_CONFIG1_BUSFREE_SUPPORT_SELECT = {1, 0x1};
struct bitmask MSM6800_CONFIG1_NAND_SIZE = {2, 0xf};
struct bitmask MSM6800_CONFIG1_PAGE_IS_2KB = {6, 0x1};
struct bitmask MSM6800_CONFIG1_WIDE_NAND = {7, 0x1};
struct bitmask MSM6800_CONFIG1_NAND_RECOVERY_CYCLE = {8, 0x7};

struct bitmask MSM6800_CONFIG2_ID_RD_HOLD = {0, 0x1f};
struct bitmask MSM6800_CONFIG2_RD_HOLD = {5, 0x1f};
struct bitmask MSM6800_CONFIG2_RD_SETUP = {10, 0x1f};
struct bitmask MSM6800_CONFIG2_WR_HOLD = {15, 0x1f};
struct bitmask MSM6800_CONFIG2_WR_SETUP = {20, 0x1f};
struct bitmask MSM6800_CONFIG2_WR_CS_SETUP = {25, 0x1f};

/* MSM7200 */
#define MSM7200_REG_FLASH_CMD 0x0000
#define MSM7200_REG_ADDR0 0x0004
#define MSM7200_REG_ADDR1 0x0008
#define MSM7200_REG_FLASH_CHIP_SELECT 0x000C
#define MSM7200_REG_EXEC_CMD 0x0010
#define MSM7200_REG_FLASH_STATUS 0x0014
#define MSM7200_REG_BUFFER_STATUS 0x0018
#define MSM7200_REG_SFLASHC_STATUS 0x001C
#define MSM7200_REG_DEV0_CFG0 0x0020
#define MSM7200_REG_DEV0_CFG1 0x0024
#define MSM7200_REG_DEV0_ECC_CFG 0x0028
#define MSM7200_REG_DEV1_ECC_CFG 0x002C
#define MSM7200_REG_DEV1_CFG0 0x0030
#define MSM7200_REG_DEV1_CFG1 0x0034
#define MSM7200_REG_SFLASHC_CMD 0x0038
#define MSM7200_REG_SFLASHC_EXEC_CMD 0x003C
#define MSM7200_REG_READ_ID 0x0040
#define MSM7200_REG_READ_STATUS 0x0044
#define MSM7200_REG_CONFIG_DATA 0x0050
#define MSM7200_REG_CONFIG 0x0054
#define MSM7200_REG_CONFIG_MODE 0x0058
#define MSM7200_REG_CONFIG_STATUS 0x0060
#define MSM7200_REG_MACRO1_REG 0x0064
#define MSM7200_REG_XFR_STEP1 0x0070
#define MSM7200_REG_XFR_STEP2 0x0074
#define MSM7200_REG_XFR_STEP3 0x0078
#define MSM7200_REG_XFR_STEP4 0x007C
#define MSM7200_REG_XFR_STEP5 0x0080
#define MSM7200_REG_XFR_STEP6 0x0084
#define MSM7200_REG_XFR_STEP7 0x0088
#define MSM7200_REG_GENP_REG0 0x0090
#define MSM7200_REG_GENP_REG1 0x0094
#define MSM7200_REG_GENP_REG2 0x0098
#define MSM7200_REG_GENP_REG3 0x009C
#define MSM7200_REG_DEV_CMD0 0x00A0
#define MSM7200_REG_DEV_CMD1 0x00A4
#define MSM7200_REG_DEV_CMD2 0x00A8
#define MSM7200_REG_DEV_CMD_VLD 0x00AC
#define MSM7200_REG_EBI2_MISR_SIG_REG 0x00B0
#define MSM7200_REG_ADDR2 0x00C0
#define MSM7200_REG_ADDR3 0x00C4
#define MSM7200_REG_ADDR4 0x00C8
#define MSM7200_REG_ADDR5 0x00CC
#define MSM7200_REG_DEV_CMD3 0x00D0
#define MSM7200_REG_DEV_CMD4 0x00D4
#define MSM7200_REG_DEV_CMD5 0x00D8
#define MSM7200_REG_DEV_CMD6 0x00DC
#define MSM7200_REG_SFLASHC_BURST_CFG 0x00E0
#define MSM7200_REG_ADDR6 0x00E4
#define MSM7200_REG_EBI2_ECC_BUF_CFG 0x00F0
#define MSM7200_REG_HW_INFO 0x00FC
#define MSM7200_REG_FLASH_BUFFER 0x0100
#define MSM7200_REG_NAND_MPU_ENABLE 0x100000

#define MSM7200_CMD_RESET 0x31
#define MSM7200_CMD_PAGE_READ 0x32
#define MSM7200_CMD_PAGE_READ_ECC 0x33
#define MSM7200_CMD_PAGE_READ_ALL 0x34
#define MSM7200_CMD_SEQ_PAGE_READ 0x15
#define MSM7200_CMD_PRG_PAGE 0x36
#define MSM7200_CMD_PRG_PAGE_ECC 0x37
#define MSM7200_CMD_PRG_PAGE_ALL 0x39
#define MSM7200_CMD_BLOCK_ERASE 0x3A
#define MSM7200_CMD_FETCH_ID 0x0B
#define MSM7200_CMD_STATUS 0x0C
#define MSM7200_CMD_RESET_NAND 0x0D

struct bitmask MSM7200_NAND_FLASH_CMD_READ_CACHE_LAST = {26, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_READ_CACHE_SEQ = {25, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_EN_READ_CACHE_NEXT_CMD = {24, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_EN_PROGRAM_PAGE_CACHE_NEXT_CMD = {20, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_EXTENDED_FETCH_ID = {19, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_ONE_NAND_INTR_STATUS = {18, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_ONE_NAND_HOST_CFG = {17, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_AUTO_DETECT_DATA_XFR_SIZE = {7, 0x3ff};
struct bitmask MSM7200_NAND_FLASH_CMD_AUTO_DETECT = {6, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_LAST_PAGE = {5, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_PAGE_ACC = {4, 0x1};
struct bitmask MSM7200_NAND_FLASH_CMD_OP_CMD = {0, 0xf};

#define MSM7200_NAND_FLASH_CMD_PAGE_ACC_NON_PAGE_ACCESS_COMMAND 0
#define MSM7200_NAND_FLASH_CMD_PAGE_ACC_PAGE_ACCESS_COMMAND 1
#define MSM7200_NAND_FLASH_CMD_OP_CMD_RESERVED_0 0
#define MSM7200_NAND_FLASH_CMD_OP_CMD_ABORT_TRANSACTION 1
#define MSM7200_NAND_FLASH_CMD_OP_CMD_PAGE_READ 2
#define MSM7200_NAND_FLASH_CMD_OP_CMD_PAGE_READ_WITH_ECC 3
#define MSM7200_NAND_FLASH_CMD_OP_CMD_PAGE_READ_WITH_ECC_SPARE 4
#define MSM7200_NAND_FLASH_CMD_OP_CMD_PROGRAM_PAGE 6
#define MSM7200_NAND_FLASH_CMD_OP_CMD_PAGE_PROGRAM_WITH_ECC 7
#define MSM7200_NAND_FLASH_CMD_OP_CMD_RESERVED_8 8
#define MSM7200_NAND_FLASH_CMD_OP_CMD_PROGRAM_PAGE_WITH_SPARE 9
#define MSM7200_NAND_FLASH_CMD_OP_CMD_BLOCK_ERASE 10
#define MSM7200_NAND_FLASH_CMD_OP_CMD_FETCH_ID 11
#define MSM7200_NAND_FLASH_CMD_OP_CMD_CHECK_STATUS 12
#define MSM7200_NAND_FLASH_CMD_OP_CMD_RESET_NAND_FLASH_DEVICE_OR_ONENAND_REGISTER_WRITE 13
#define MSM7200_NAND_FLASH_CMD_OP_CMD_RESERVED_E 14
#define MSM7200_NAND_FLASH_CMD_OP_CMD_RESERVED_F 15

struct bitmask MSM7200_NAND_ADDR0_DEV_ADDR0 = {0, 0xffffffff};
struct bitmask MSM7200_NAND_ADDR1_DEV_ADDR1 = {0, 0xffffffff};
struct bitmask MSM7200_NAND_FLASH_CHIP_SELECT_RESET_XFR_STEP_LOAD_DONE_STATUS = {6, 0x1};
struct bitmask MSM7200_NAND_FLASH_CHIP_SELECT_XFR_STEP2_SAFE_REG_EN = {5, 0x1};
struct bitmask MSM7200_NAND_FLASH_CHIP_SELECT_ONE_NAND_EN = {3, 0x1};
struct bitmask MSM7200_NAND_FLASH_CHIP_SELECT_DM_EN = {2, 0x1};
struct bitmask MSM7200_NAND_FLASH_CHIP_SELECT_PARTIAL_XFR = {1, 0x1};
struct bitmask MSM7200_NAND_FLASH_CHIP_SELECT_NAND_DEV_SEL = {0, 0x1};

#define MSM7200_NAND_FLASH_CHIP_SELECT_XFR_STEP2_SAFE_REG_EN_DYNAMICALLY_CHANGING_THE_XFR_STEP2_IS_ENABLED 1
#define MSM7200_NAND_FLASH_CHIP_SELECT_PARTIAL_XFR_DISABLE 0
#define MSM7200_NAND_FLASH_CHIP_SELECT_PARTIAL_XFR_ENABLE 1
#define MSM7200_NAND_FLASH_CHIP_SELECT_NAND_DEV_SEL_NAND_CS0_IS_SELECTED 0
#define MSM7200_NAND_FLASH_CHIP_SELECT_NAND_DEV_SEL_NAND_CS1_IS_SELECTED 1

struct bitmask MSM7200_NANDC_EXEC_CMD_EXEC_CMD = {0, 0x1};
#define MSM7200_NANDC_EXEC_CMD_EXEC_CMD_EXECUTE_THE_COMMAND 1

struct bitmask MSM7200_NAND_FLASH_STATUS_DEV_STATUS = {16, 0xffff};
struct bitmask MSM7200_NAND_FLASH_STATUS_CODEWORD_CNTR = {12, 0xf};
struct bitmask MSM7200_NAND_FLASH_STATUS_FIELD_2KBYTE_DEVICE = {11, 0x1};
struct bitmask MSM7200_NAND_FLASH_STATUS_FIELD_512BYTE_DEVICE = {10, 0x1};
struct bitmask MSM7200_NAND_FLASH_STATUS_AUTO_DETECT_DONE = {9, 0x1};
struct bitmask MSM7200_NAND_FLASH_STATUS_MPU_ERROR = {8, 0x1};
struct bitmask MSM7200_NAND_FLASH_STATUS_PROG_ERASE_OP_RESULT = {7, 0x1};
struct bitmask MSM7200_NAND_FLASH_STATUS_NANDC_TIMEOUT_ERR = {6, 0x1};
struct bitmask MSM7200_NAND_FLASH_STATUS_READY_BSY_N = {5, 0x1};
struct bitmask MSM7200_NAND_FLASH_STATUS_OP_ERR = {4, 0x1};
struct bitmask MSM7200_NAND_FLASH_STATUS_OPER_STATUS = {0, 0xf};

#define MSM7200_NAND_FLASH_STATUS_FIELD_2KBYTE_DEVICE_NOT_A_2K_BYTE_PAGE_DEVICE 0
#define MSM7200_NAND_FLASH_STATUS_FIELD_2KBYTE_DEVICE_ENUM_2K_BYTE_PAGE_DEVICE 1
#define MSM7200_NAND_FLASH_STATUS_FIELD_512BYTE_DEVICE_NOT_A_512_BYTE_PAGE_DEVICE 0
#define MSM7200_NAND_FLASH_STATUS_FIELD_512BYTE_DEVICE_ENUM_512_BYTE_PAGE_DEVICE 1
#define MSM7200_NAND_FLASH_STATUS_MPU_ERROR_NO_ERROR 0
#define MSM7200_NAND_FLASH_STATUS_MPU_ERROR_MPU_ERROR_FOR_THE_ACCESS 1
#define MSM7200_NAND_FLASH_STATUS_NANDC_TIMEOUT_ERR_NO_ERROR 0
#define MSM7200_NAND_FLASH_STATUS_NANDC_TIMEOUT_ERR_ERROR 1
#define MSM7200_NAND_FLASH_STATUS_READY_BSY_N_EXTERNAL_FLASH_IS_BUSY 0
#define MSM7200_NAND_FLASH_STATUS_READY_BSY_N_EXTERNAL_FLASH_IS_READY 1
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_IDLE_STATE 0
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_ABORT_TRANSACTION 1
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_PAGE_READ 2
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_PAGE_READ_WITH_ECC 3
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_PAGE_READ_WITH_ECC_AND_SPARE_DATA 4
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_SEQUENTIAL_PAGE_READ 5
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_PROGRAM_PAGE 6
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_PROGRAM_PAGE_WITH_ECC 7
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_RESERVED_PROGRAMMING 8
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_PROGRAM_PAGE_WITH_SPARE 9
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_BLOCK_ERASE 10
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_FETCH_ID 11
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_CHECK_STATUS 12
#define MSM7200_NAND_FLASH_STATUS_OPER_STATUS_RESET_FLASH_DEVICE 13

struct bitmask MSM7200_NANDC_BUFFER_STATUS_BAD_BLOCK_STATUS = {16, 0xffff};
struct bitmask MSM7200_NANDC_BUFFER_STATUS_XFR_STEP2_REG_UPDATE_DONE = {9, 0x1};
struct bitmask MSM7200_NANDC_BUFFER_STATUS_UNCORRECTABLE = {8, 0x1};
struct bitmask MSM7200_NANDC_BUFFER_STATUS_NUM_ERRORS = {0, 0x1f};
struct bitmask MSM7200_NAND_DEV_CFG0_SET_RD_MODE_AFTER_STATUS = {31, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG0_STATUS_BFR_READ = {30, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG0_NUM_ADDR_CYCLES = {27, 0x7};
struct bitmask MSM7200_NAND_DEV_CFG0_SPARE_SIZE_BYTES = {23, 0xf};
struct bitmask MSM7200_NAND_DEV_CFG0_ECC_PARITY_SIZE_BYTES = {19, 0xf};
struct bitmask MSM7200_NAND_DEV_CFG0_UD_SIZE_BYTES = {9, 0x3ff};
struct bitmask MSM7200_NAND_DEV_CFG0_CW_PER_PAGE = {6, 0x7};
struct bitmask MSM7200_NAND_DEV_CFG0_ROW_ADDR_CYCLES = {3, 0x7};
struct bitmask MSM7200_NAND_DEV_CFG0_COL_ADDR_CYCLES = {0, 0x7};

#define MSM7200_NAND_DEV_CFG0_NUM_ADDR_CYCLES_NO_ADDRESS_CYCLES 0
#define MSM7200_NAND_DEV_CFG0_CW_PER_PAGE__1_CODEWORD_PER_PAGE 0
#define MSM7200_NAND_DEV_CFG0_CW_PER_PAGE__2_CODEWORDS_PER_PAGE 1
#define MSM7200_NAND_DEV_CFG0_CW_PER_PAGE__3_CODEWORDS_PER_PAGE 2
#define MSM7200_NAND_DEV_CFG0_CW_PER_PAGE__4_CODEWORDS_PER_PAGE 3
#define MSM7200_NAND_DEV_CFG0_CW_PER_PAGE__5_CODEWORDS_PER_PAGE 4
#define MSM7200_NAND_DEV_CFG0_CW_PER_PAGE__6_CODEWORDS_PER_PAGE 5
#define MSM7200_NAND_DEV_CFG0_CW_PER_PAGE__7_CODEWORDS_PER_PAGE 6
#define MSM7200_NAND_DEV_CFG0_CW_PER_PAGE__8_CODEWORDS_PER_PAGE 7
#define MSM7200_NAND_DEV_CFG0_ROW_ADDR_CYCLES_NO_ROW_ADDRESS_CYCLES 0
#define MSM7200_NAND_DEV_CFG0_COL_ADDR_CYCLES_NO_COLUMN_ADDRESS_CYCLES 0

struct bitmask MSM7200_NAND_DEV_CFG1_ECC_MODE = {28, 0x3};
struct bitmask MSM7200_NAND_DEV_CFG1_ENABLE_BCH_ECC = {27, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG1_DISABLE_ECC_RESET_AFTER_OPDONE = {25, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG1_ECC_DECODER_CGC_EN = {24, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG1_ECC_ENCODER_CGC_EN = {23, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG1_WR_RD_BSY_GAP = {17, 0x3f};
struct bitmask MSM7200_NAND_DEV_CFG1_BAD_BLOCK_IN_SPARE_AREA = {16, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG1_BAD_BLOCK_BYTE_NUM = {6, 0x3ff};
struct bitmask MSM7200_NAND_DEV_CFG1_CS_ACTIVE_BSY = {5, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG1_NAND_RECOVERY_CYCLES = {2, 0x7};
struct bitmask MSM7200_NAND_DEV_CFG1_WIDE_FLASH = {1, 0x1};
struct bitmask MSM7200_NAND_DEV_CFG1_ECC_DISABLE = {0, 0x1};

#define MSM7200_NAND_DEV_CFG1_WR_RD_BSY_GAP_ENUM_2_CLOCK_CYCLE_GAP 0
#define MSM7200_NAND_DEV_CFG1_WR_RD_BSY_GAP_ENUM_4_CLOCK_CYCLES_GAP 1
#define MSM7200_NAND_DEV_CFG1_WR_RD_BSY_GAP_ENUM_6_CLOCK_CYCLES_GAP 2
#define MSM7200_NAND_DEV_CFG1_WR_RD_BSY_GAP_ENUM_8_CLOCK_CYCLES_GAP 3
#define MSM7200_NAND_DEV_CFG1_WR_RD_BSY_GAP_ENUM_10_CLOCK_CYCLES_GAP 4
#define MSM7200_NAND_DEV_CFG1_WR_RD_BSY_GAP_ENUM_128_CLOCK_CYCLES_GAP 63
#define MSM7200_NAND_DEV_CFG1_BAD_BLOCK_IN_SPARE_AREA_IN_USER_DATA_AREA 0
#define MSM7200_NAND_DEV_CFG1_BAD_BLOCK_IN_SPARE_AREA_IN_SPARE_AREA 1
#define MSM7200_NAND_DEV_CFG1_CS_ACTIVE_BSY_ALLOW_CS_DE_ASSERTION 0
#define MSM7200_NAND_DEV_CFG1_CS_ACTIVE_BSY_ASSERT_CS_DURING_BUSY 1
#define MSM7200_NAND_DEV_CFG1_NAND_RECOVERY_CYCLES_ENUM_1_RECOVERY_CYCLE 0
#define MSM7200_NAND_DEV_CFG1_NAND_RECOVERY_CYCLES_ENUM_2_RECOVERY_CYCLES 1
#define MSM7200_NAND_DEV_CFG1_NAND_RECOVERY_CYCLES_ENUM_3_RECOVERY_CYCLES 2
#define MSM7200_NAND_DEV_CFG1_NAND_RECOVERY_CYCLES_ENUM_8_RECOVERY_CYCLES 7
#define MSM7200_NAND_DEV_CFG1_WIDE_FLASH_ENUM_8_BIT_DATA_BUS 0
#define MSM7200_NAND_DEV_CFG1_WIDE_FLASH_ENUM_16_BIT_DATA_BUS 1

struct bitmask MSM7200_NAND_FLASH_READ_ID_READ_ID = {0, 0xffffffff};
struct bitmask MSM7200_NAND_FLASH_READ_STATUS_ECC_STATUS = {16, 0xffff};
struct bitmask MSM7200_NAND_FLASH_READ_STATUS_DEV_STATUS = {0, 0xffff};
struct bitmask MSM7200_NAND_FLASH_CONFIG_DATA_DATA_IN = {0, 0xffffffff};
struct bitmask MSM7200_NAND_FLASH_CONFIG_DATA_OUT = {16, 0xffff};
struct bitmask MSM7200_NAND_FLASH_CONFIG_ADDR_OUT = {14, 0x3};
struct bitmask MSM7200_NAND_FLASH_CONFIG_DATA_OUT_EN = {13, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_DATA_IN_EN = {10, 0x7};
struct bitmask MSM7200_NAND_FLASH_CONFIG_CS5_N = {9, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_CS4_N = {8, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_CS3_N = {7, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_CS2_N = {6, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_CS1_N = {5, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_CS0_N = {4, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_ALE = {3, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_CLE = {2, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_WE_N = {1, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_RE_N = {0, 0x1};

#define MSM7200_NAND_FLASH_CONFIG_DATA_IN_EN_DONT_READ 0
#define MSM7200_NAND_FLASH_CONFIG_DATA_IN_EN_WRITE_NAND_FLASH_CONFIG_DATA_15_0 1
#define MSM7200_NAND_FLASH_CONFIG_DATA_IN_EN_WRITE_NAND_FLASH_CONFIG_DATA_31_16 2
#define MSM7200_NAND_FLASH_CONFIG_DATA_IN_EN_WRITE_NAND_FLASH_READ_STATUS_15_0 3

struct bitmask MSM7200_NAND_FLASH_CONFIG_MODE_CONFIG_ACC = {0, 0x1};
struct bitmask MSM7200_NAND_FLASH_CONFIG_STATUS_CONFIG_MODE = {0, 0x1};
struct bitmask MSM7200_FLASH_MACRO1_REG_QSC6270_ADDR_BUS_HOLD_CYCLE = {19, 0x1};
struct bitmask MSM7200_FLASH_MACRO1_REG_QSC6270_DATA_START_ADDR = {0, 0xffff};
struct bitmask MSM7200_FLASH_MACRO1_REG_FLASH_DATA_MACRO1 = {14, 0x3f};
struct bitmask MSM7200_FLASH_MACRO1_REG_FLASH_DATA_MACRO0 = {0, 0x3fff};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_SEQ_STEP_NUMBER = {30, 0x3};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_STEP1_WAIT = {26, 0xf};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_AOUT_EN = {25, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_DATA_EN = {24, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_CE_EN = {23, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_CLE_EN = {22, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_ALE_PIN = {21, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_WE_EN = {20, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_RE_EN = {19, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_CMD_WIDE = {18, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_SEQ_STEP_NUMBER = {14, 0x3};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_STEP1_WAIT = {10, 0xf};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_AOUT_EN = {9, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_DATA_EN = {8, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_CE_EN = {7, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_CLE_EN = {6, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_ALE_PIN = {5, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_WE_EN = {4, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_RE_EN = {3, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_DATA_WIDE = {2, 0x1};
struct bitmask MSM7200_FLASH_XFR_STEP_EXTA_READ_WAIT = {0, 0x3};

#define MSM7200_FLASH_XFR_STEP_CMD_SEQ_STEP_NUMBER_SIMPLE_STEP 0
#define MSM7200_FLASH_XFR_STEP_CMD_SEQ_STEP_NUMBER_LOOP_START 1
#define MSM7200_FLASH_XFR_STEP_CMD_SEQ_STEP_NUMBER_LOOP_END 2
#define MSM7200_FLASH_XFR_STEP_CMD_SEQ_STEP_NUMBER_LAST_STEP 3
#define MSM7200_FLASH_XFR_STEP_CMD_AOUT_EN_ADDRESS_LOGIC_DISABLED 0
#define MSM7200_FLASH_XFR_STEP_CMD_AOUT_EN_DRIVE_ADDRESS 1
#define MSM7200_FLASH_XFR_STEP_CMD_DATA_EN_DISABLE_DATA_BUS 0
#define MSM7200_FLASH_XFR_STEP_CMD_DATA_EN_DRIVE_DATA 1
#define MSM7200_FLASH_XFR_STEP_CMD_CE_EN_DE_ASSERT_CHIP_SELECTS 0
#define MSM7200_FLASH_XFR_STEP_CMD_CE_EN_ASSERT_CHIP_SELECT 1
#define MSM7200_FLASH_XFR_STEP_CMD_CLE_EN_LOGIC_DE_ASSERTS 0
#define MSM7200_FLASH_XFR_STEP_CMD_CLE_EN_LOGIC_ASSERTS 1
#define MSM7200_FLASH_XFR_STEP_CMD_ALE_PIN_LOGIC_DE_ASSERTS 0
#define MSM7200_FLASH_XFR_STEP_CMD_ALE_PIN_LOGIC_ASSERTS 1
#define MSM7200_FLASH_XFR_STEP_CMD_WE_EN_LOGIC_DE_ASSERTS 0
#define MSM7200_FLASH_XFR_STEP_CMD_WE_EN_LOGIC_ASSERTS 1
#define MSM7200_FLASH_XFR_STEP_CMD_RE_EN_LOGIC_DE_ASSERTS 0
#define MSM7200_FLASH_XFR_STEP_CMD_RE_EN_LOGIC_ASSERTS 1
#define MSM7200_FLASH_XFR_STEP_CMD_WIDE_SEND_CMD_ON_8_BIT_BUS 0
#define MSM7200_FLASH_XFR_STEP_CMD_WIDE_SEND_CMD_ON_16_BIT_BUS 1
#define MSM7200_FLASH_XFR_STEP_DATA_SEQ_STEP_NUMBER_LOOP_START 1
#define MSM7200_FLASH_XFR_STEP_DATA_SEQ_STEP_NUMBER_LOOP_END 2
#define MSM7200_FLASH_XFR_STEP_DATA_SEQ_STEP_NUMBER_LAST_STEP 3
#define MSM7200_FLASH_XFR_STEP_DATA_AOUT_EN_ADDRESS_LOGIC_DISABLED 0
#define MSM7200_FLASH_XFR_STEP_DATA_AOUT_EN_DRIVE_ADDRESS 1
#define MSM7200_FLASH_XFR_STEP_DATA_DATA_EN_DISABLE_DATA_BUS 0
#define MSM7200_FLASH_XFR_STEP_DATA_DATA_EN_DRIVE_DATA 1
#define MSM7200_FLASH_XFR_STEP_DATA_CE_EN_DE_ASSERT_CHIP_SELECTS 0
#define MSM7200_FLASH_XFR_STEP_DATA_CE_EN_ASSERT_CHIP_SELECT 1
#define MSM7200_FLASH_XFR_STEP_DATA_CLE_EN_THE_LOGIC_DE_ASSERTS 0
#define MSM7200_FLASH_XFR_STEP_DATA_CLE_EN_THE_LOGIC_ASSERTS 1
#define MSM7200_FLASH_XFR_STEP_DATA_ALE_PIN_LOGIC_DE_ASSERTS 0
#define MSM7200_FLASH_XFR_STEP_DATA_ALE_PIN_LOGIC_ASSERTS 1
#define MSM7200_FLASH_XFR_STEP_DATA_WE_EN_LOGIC_DE_ASSERTS 0
#define MSM7200_FLASH_XFR_STEP_DATA_WE_EN_LOGIC_ASSERTS 1
#define MSM7200_FLASH_XFR_STEP_DATA_RE_EN_LOGIC_DE_ASSERTS 0
#define MSM7200_FLASH_XFR_STEP_DATA_RE_EN_LOGIC_ASSERTS 1
#define MSM7200_FLASH_XFR_STEP_DATA_WIDE_USE_8_BIT_DATA_BUS_FOR_DATA 0
#define MSM7200_FLASH_XFR_STEP_DATA_WIDE_USE16_BIT_DATA_BUS_FOR_DATA 1

struct bitmask MSM7200_FLASH_DEV_CMD_WRITE_START = {24, 0xff};
struct bitmask MSM7200_FLASH_DEV_CMD_WRITE_ADDR = {16, 0xff};
struct bitmask MSM7200_FLASH_DEV_CMD_ERASE_START = {8, 0xff};
struct bitmask MSM7200_FLASH_DEV_CMD_ERASE_ADDR = {0, 0xff};

struct bitmask MSM7200_FLASH_DEV_CMD_VLD_READ_PARAMETER_PAGE_CODE = {24, 0xff};
struct bitmask MSM7200_FLASH_DEV_CMD_VLD_SEQ_READ_START_VLD = {4, 0x1};
struct bitmask MSM7200_FLASH_DEV_CMD_VLD_ERASE_START_VLD = {3, 0x1};
struct bitmask MSM7200_FLASH_DEV_CMD_VLD_WRITE_START_VLD = {2, 0x1};
struct bitmask MSM7200_FLASH_DEV_CMD_VLD_READ_STOP_VLD = {1, 0x1};
struct bitmask MSM7200_FLASH_DEV_CMD_VLD_READ_START_VLD = {0, 0x1};

struct bitmask MSM7200_EBI2_MISR_SIG_REG_EBI2_MISR_SIG = {0, 0xffffffff};

struct bitmask MSM7200_NAND_ADDR2_DEV_ADDR2 = {0, 0xffffffff};
struct bitmask MSM7200_NAND_ADDR3_DEV_ADDR3 = {0, 0xffffffff};
struct bitmask MSM7200_NAND_ADDR4_DEV_ADDR4 = {0, 0xffffffff};
struct bitmask MSM7200_NAND_ADDR5_DEV_ADDR5 = {0, 0xffffffff};

struct bitmask MSM7200_FLASH_DEV_CMD3_READ_CACHE_LAST = {24, 0xff};

struct bitmask MSM7200_FLASH_DEV_CMD3_READ_CACHE_SEQ = {16, 0xff};

struct bitmask MSM7200_FLASH_DEV_CMD3_WRITE_START_CACHE = {0, 0xff};

struct bitmask MSM7200_FLASH_DEV_CMD4_GP_CMD4 = {16, 0xffff};
struct bitmask MSM7200_FLASH_DEV_CMD4_GP_CMD3 = {0, 0xffff};

struct bitmask MSM7200_FLASH_DEV_CMD5_GP_CMD6 = {16, 0xffff};
struct bitmask MSM7200_FLASH_DEV_CMD5_GP_CMD5 = {0, 0xffff};

struct bitmask MSM7200_FLASH_DEV_CMD6_GP_CMD8 = {16, 0xffff};
struct bitmask MSM7200_FLASH_DEV_CMD6_GP_CMD7 = {0, 0xffff};

struct bitmask MSM7200_NAND_ADDR6_DEV_ADDR6 = {0, 0xffffffff};

struct bitmask MSM7200_EBI2_ECC_BUF_CFG_NUM_STEPS = {0, 0x3ff};

struct bitmask MSM7200_FLASH_BUFF0_ACC_BUFF_DATA = {0, 0xffffffff};

#endif /* OPENOCD_FLASH_NAND_MSM_H */
